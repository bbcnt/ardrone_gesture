package gesture;

import controller.NeuralController;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;


/**
 * Allow the user to select the captor and the service he want to use
 * 
 * Java version : JDK 1.6.0_21
 * IDE : Netbeans 7.1.1
 * 
 * @author Gregoire Aubert
 * @version 1.0
 */
public class CaptorSelectionFrame extends javax.swing.JFrame {
   private static final long serialVersionUID = 1L;
   
   // The default frame size
   public static int DEFAULT_FRAME_WIDTH = 262;
   public static int DEFAULT_FRAME_HEIGHT = 147;
   
   // Devices list
   private List<MyRemoteDevice> devicesList;
   // The neural controller
   private NeuralController controller;
   
   /**
    * Creates new form MainFrame
    * @param controller the NeuralController that create the CaptorSelectionFrame
    */
   public CaptorSelectionFrame(NeuralController controller) {
      this.controller = controller;
      
      // Set the position and create the window
      if(controller.getFramePosition() != null)
      this.setBounds(controller.getFramePosition().x, controller.getFramePosition().y, 0, 0);
      initComponents();
      this.setTitle(controller.getFrameTitle());
      
      // Set the ComboBoxModel with the discovered devices
      devicesList = new LinkedList<MyRemoteDevice>(BluetoothDiscovery.getInstance().getDevicesDiscovered());
      devicesList.add(0, new MyRemoteDevice(null));
      jcbDevices.setModel(new DefaultComboBoxModel(devicesList.toArray()));
      jcbDevices.setEnabled(true);
      
      // Show the frame
      this.setVisible(true);
      
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMoveTitle = new javax.swing.JLabel();
        lblMove = new javax.swing.JLabel();
        lblDevices = new javax.swing.JLabel();
        lblServices = new javax.swing.JLabel();
        jcbServices = new javax.swing.JComboBox();
        jcbDevices = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Shimmer and Neural Network");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("gesture_icon.png")));
        setMaximumSize(new java.awt.Dimension(2147483647, 127));
        setMinimumSize(new java.awt.Dimension(232, 127));
        setPreferredSize(new Dimension(DEFAULT_FRAME_WIDTH, DEFAULT_FRAME_HEIGHT));
        setResizable(false);

        lblMoveTitle.setText("Detected gesture :");

        lblMove.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblMove.setText("-");

        lblDevices.setText("Devices :");

        lblServices.setText("Services :");

        jcbServices.setEnabled(false);
        jcbServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbServicesActionPerformed(evt);
            }
        });

        jcbDevices.setEnabled(false);
        jcbDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDevicesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMoveTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblDevices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblServices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbServices, 0, 184, Short.MAX_VALUE)
                            .addComponent(jcbDevices, 0, 184, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDevices)
                    .addComponent(jcbDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServices)
                    .addComponent(jcbServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(lblMoveTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void jcbDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDevicesActionPerformed
      
      // Verify the selected item
      if (jcbDevices.getSelectedIndex() > 0) {
         this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
         jcbDevices.setEnabled(false);
         
         // Retrieve the services list for the device
         List<String> servicesList;
         synchronized(BluetoothDiscovery.getInstance()){
             servicesList = BluetoothDiscovery.getInstance().launchServicesDiscovery(((MyRemoteDevice) jcbDevices.getSelectedItem()).getRemoteDevice());
         }
         servicesList.add(0, "");
         
         // Show the services list
         jcbServices.setModel(new DefaultComboBoxModel(servicesList.toArray()));
         this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
         jcbServices.setEnabled(true);
      }
   }//GEN-LAST:event_jcbDevicesActionPerformed

   private void jcbServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbServicesActionPerformed
      
      // Verify the selected service
      if (jcbServices.getSelectedIndex() > 0) {
         jcbServices.setEnabled(false);
         
         // Start the communication with the shimmer captor
         new BluetoothDeviceCom((String) jcbServices.getSelectedItem(), controller);
      }
   }//GEN-LAST:event_jcbServicesActionPerformed

   /**
    * Change the action command detected
    * @param action is the name of the detected action command
    */
   public void changeActionCommand(String action){
      lblMove.setText(action);
   }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox jcbDevices;
    private javax.swing.JComboBox jcbServices;
    private javax.swing.JLabel lblDevices;
    private javax.swing.JLabel lblMove;
    private javax.swing.JLabel lblMoveTitle;
    private javax.swing.JLabel lblServices;
    // End of variables declaration//GEN-END:variables

}
